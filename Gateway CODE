#include <stdio.h>   ////printf
#include <string.h>
#include <math.h>   ////printf
#include <avr/io.h>  /////avr registers 
#include <avr/interrupt.h>  /// interrupts
#include <avr/wdt.h>        ///watch dog timer
#include <util/delay.h>     ///delay
#include "lcd_lib.c"      
#include "cc2500_lib_avr.c"
#include "usart.c"
#include "dbg_putchar.h"
#include "dbg_putchar.c"

#define  WDTO_2S   7

#define ON        '1'
#define OFF        '0'

uint16_t 
volatile uint16_t rx_counter;

char rx_data[200];


//char NODE1[10];
//char NODE2[10];
//char NODE3[10];

uint32_t UBRRVAL;

uint8_t        count;
char * pointer;

uint8_t temp_status='0',moist_status='0',humi_status='0';

//adjust LCDsendChar() function for stream
static int LCDsendstream(char c, FILE *stream);
//----set output stream to LCD-------
static FILE lcd_str = FDEV_SETUP_STREAM(LCDsendstream, NULL, _FDEV_SETUP_WRITE);
static int LCDsendstream(char c , FILE *stream);

static int LCDsendstream(char c , FILE *stream)
        {
        LCDsendChar(c);
        return 0;
        }

void Put_Str(char *p)
{
        while(*p)
        {
                dbg_putchar(*p++);        
        }
}

void COM_rx_off( void )
        {
        cli();
    UCSRB &= ~(1<<RXCIE);       // Disable RX interrupt
        }

void COM_rx_on( void )
        {
        sei();
    UCSRB |= ( 1 << RXCIE );  // Enable RX interrupt
        }


ISR(USART_RXC_vect)
{
        rx_data [rx_counter] = UDR;
        dbg_putchar(rx_data [rx_counter]);        ///Degug
        if(rx_counter < 200)
                rx_counter++;        
}

void clear_buffer(void)
        {
        memset(rx_data,0,sizeof(rx_data));
        rx_counter =0;
        }

void display_start(int count)
        {
        LCDGotoXY(14,0);//Cursor Home
        printf("%d",count);
        }


void display_done(void)
        {
//        LCDGotoXY(14,0);//Cursor Home
//        printf(" D");
        }


void display_debug(void)
        {
        LCDGotoXY(0,0);//Cursor Home
        for(i=0;i<16;i++)
        LCDsendChar(rx_data[i+2]);
        _delay_ms(2000);
        LCDGotoXY(0,0);//Cursor Home
        printf("               ");
        }

void init_modem(void)
{
        ag0:
        count = 0;
        clear_buffer();
        USART_Transmit_String("AT\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag0;

        ag00:
        count = 0;
        clear_buffer();
        USART_Transmit_String("AT\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag00;


        ag1:
        count = 0;
        clear_buffer();
        USART_Transmit_String("ATE0\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;

count ++;                                                                        
        clear_buffer();
        USART_Transmit_String("AT+CSQ\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;
count ++;
        clear_buffer();
        USART_Transmit_String("AT+CGATT?\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"+CGATT: 1");
        if(!pointer)
        goto ag1;
count ++;
        clear_buffer();
        USART_Transmit_String("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;
count ++;
        clear_buffer();
        USART_Transmit_String("AT+SAPBR=3,1,\"APN\",\"www\"\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;
count ++;
//        ag3:
        clear_buffer();
        USART_Transmit_String("AT+SAPBR=1,1\r");
        display_start(count);
        while(rx_counter < 5){}
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;

count ++;
        clear_buffer();
        USART_Transmit_String("AT+SAPBR=2,1\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;
count ++;
        clear_buffer();
        USART_Transmit_String("AT+HTTPINIT\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;
count ++;
        clear_buffer();
        USART_Transmit_String("AT+HTTPPARA=\"CID\",1\r");
        display_start(count);
        _delay_ms(1000);
        display_done();
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag1;
        count ++;
        clear_buffer();
}

void Upload_Data(void)
{
        ag2:
        count =0;
        clear_buffer();
        USART_Transmit_String("AT+HTTPPARA=\"URL\",\"http://envsurveillance.appspot.com/updateData\"");
        USART_Transmit(0x0d);
        display_start(count);
        while(rx_counter < 5){}
        display_debug();
        pointer = strstr(rx_data,"OK");
        if(!pointer)
        goto ag2;

        count ++;
        clear_buffer();
        USART_Transmit_String("AT+HTTPDATA=127,30000");
        USART_Transmit(0x0d);
        display_start(count);
        while(rx_counter < 10){}
        display_debug();
        pointer = strstr(rx_data,"DOWNLOAD");
        if(!pointer)
        goto ag2;

        count ++;
        clear_buffer();
/*
        for(timeup =0;timeup<1000;timeup++)                                                                                                        
                {
                convert_ascii(ECG_SAMPLES[timeup]);
                USART_Transmit(d1);
                 USART_Transmit(d2);
                USART_Transmit(d3);
                USART_Transmit(d4);
                USART_Transmit('|');
                }
*/

//        USART_Transmit_String(GPRS_DATA);

        display_start(count);
        while(rx_counter < 5){}
        display_debug();
        pointer = strstr(rx_data,"OK");
        
        if(!pointer)
        goto ag2;
        


        count ++;
        clear_buffer();
        USART_Transmit_String("AT+HTTPACTION=1\r");                //Post Method
        display_start(count);
        while(rx_counter < 25){}
        display_debug();
        pointer = strstr(rx_data,"200");
        if(!pointer)
        goto ag2;

        LCDGotoXY(12,0);//Cursor Home
        printf("SUCC");
        _delay_ms(1000);
        count ++;
}




int main(void)
{
        stdout = &lcd_str;    ////printf function address
        _delay_ms(1000);
        LCDinit();
        LCDclr();
        printf("GPRS Node");
        delay1s();
        USARTInit();
        sei();
        UCSRB |= ( 1 << RXCIE );  // Enable RX interrupt
        dbg_tx_init();
        init_cc2500();
        _delay_ms(1000);
        Put_Str("Conncting Gprs\r");
        LCDclr();
        LCDGotoXY(0,1);//Cursor Home
        printf("Conncting Gprs");
        //init_modem();
        
        LCDclr();
/*        while(1)
                {
                if(rxRecvPacket(data,&packetLength)== RX_OK)
                        {
                        LCDGotoXY(0,0);
                        printf("F:");        
                        LCDsendChar(data[1]);
                        LCDsendChar(data[2]);
                        LCDsendChar(data[3]);
                        LCDsendChar(data[4]);
                        LCDsendChar(data[5]);        
                        LCDsendChar(data[6]);        
                        LCDsendChar(data[7]);        
                        LCDsendChar(data[8]);        
                        LCDsendChar(data[9]);        
                        LCDsendChar(data[10]);        
                        
                        LCDsendChar(' ');
                        
                        }
                }*/

        while(1)
        {
                CC2500_DESTINATIONADDR_value = 31;
                data[0] = 31;
                data[1] = '1';                //Node ID        Temp
                data[2] = '0';
                data[3] = '0';
                data[4] = '0';
                rf_transmitt('1');
                

                if(rxRecvPacket(data,&packetLength)== RX_OK)
                {
                        LCDGotoXY(0,0);
                        printf("N1:");        
                //        LCDsendChar(data[1]);
                        LCDsendChar(data[2]);
                        LCDsendChar(data[3]);
                        LCDsendChar(data[4]);
                        LCDsendChar(data[5]);        
                        LCDsendChar(data[6]);        
                        LCDsendChar(data[7]);        
                        LCDsendChar(data[8]);        
                        LCDsendChar(data[9]);        
                        LCDsendChar(data[10]);        
                        LCDsendChar(data[11]);        
                    RX_LED_OFF;
        
                }
                else
                        RX_LED_OFF;
                
                _delay_ms(1000);
        
                        CC2500_DESTINATIONADDR_value = 32;
                data[0] = 32;
                data[1] = '2';                //Node ID        Temp
                data[2] = '0';
                data[3] = '0';
                data[4] = '0';
                rf_transmitt('1');
                

                if(rxRecvPacket(data,&packetLength)== RX_OK)
                {
                        LCDGotoXY(0,0);
                        printf("N2:");        
                //        LCDsendChar(data[1]);
                        LCDsendChar(data[2]);
                        LCDsendChar(data[3]);
                        LCDsendChar(data[4]);
                        LCDsendChar(data[5]);        
                        LCDsendChar(data[6]);        
                        LCDsendChar(data[7]);        
                        LCDsendChar(data[8]);        
                        LCDsendChar(data[9]);        
                        LCDsendChar(data[10]);        
                        LCDsendChar(data[11]);        
                    RX_LED_OFF;
        
                }
                else
                        RX_LED_OFF;
                
                _delay_ms(1000);
                        CC2500_DESTINATIONADDR_value = 33;
                data[0] = 33;
                data[1] = '3';                //Node ID        Temp
                data[2] = '0';
                data[3] = '0';
                data[4] = '0';
                rf_transmitt('1');
                

                if(rxRecvPacket(data,&packetLength)== RX_OK)
                {
                        LCDGotoXY(0,0);
                        printf("N3:");        
                //        LCDsendChar(data[1]);
                        LCDsendChar(data[2]);
                        LCDsendChar(data[3]);
                        LCDsendChar(data[4]);
                        LCDsendChar(data[5]);        
                        LCDsendChar(data[6]);        
                        LCDsendChar(data[7]);        
                        LCDsendChar(data[8]);        
                        LCDsendChar(data[9]);        
                        LCDsendChar(data[10]);        
                        LCDsendChar(data[11]);        
                    RX_LED_OFF;
        
                }
                else
                        RX_LED_OFF;
                

                //Upload_Data();
        //        _delay_ms(1000);
                
                
        } //enmd of while
        return 0;
}
